# =================================
# WebChessClock Docker Compose Configuration
# Development Environment Setup
# =================================

version: '3.8'

services:
  # =================================
  # Web Application Service (Nuxt.js)
  # =================================
  web:
    build:
      context: .
      dockerfile: Dockerfile.dev  # Use development-optimized Dockerfile
    container_name: webchessclock-web
    ports:
      - "3000:3000"  # Expose Nuxt.js development server
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=3000
      - REDIS_URL=redis://redis:6379  # Connect to Redis service
    env_file:
      - .env  # Load additional environment variables from .env file
    volumes:
      # Mount source code for hot reload during development
      - .:/app:cached
      # Exclude node_modules from being overwritten by host volume
      - /app/node_modules
      # Mount .nuxt directory for faster rebuilds
      - nuxt_build:/app/.nuxt
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - webchessclock-network
    restart: unless-stopped
    # Override the default command to run development server
    command: ["npm", "run", "dev:native"]
    # Health check for the web service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =================================
  # Redis Service (Real-time Data)
  # =================================
  redis:
    image: redis:7-alpine
    container_name: webchessclock-redis
    ports:
      - "6379:6379"  # Expose Redis port for external connections (debugging)
    volumes:
      # Persist Redis data across container restarts
      - redis_data:/data
      # Custom Redis configuration for development
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - webchessclock-network
    restart: unless-stopped
    # Redis configuration optimized for development
    command: redis-server /usr/local/etc/redis/redis.conf
    # Health check for Redis service
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    # Resource limits for development environment
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

# =================================
# Named Volumes for Data Persistence
# =================================
volumes:
  # Redis data persistence across container restarts
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./docker/data/redis

  # Nuxt.js build cache for faster rebuilds
  nuxt_build:
    driver: local

# =================================
# Network Configuration
# =================================
networks:
  webchessclock-network:
    driver: bridge
    name: webchessclock-network

# =================================
# Development Helper Commands
# =================================
# Use these commands for development:
#
# Start services:
#   docker-compose up --build
#
# Start in background:
#   docker-compose up -d --build
#
# View logs:
#   docker-compose logs -f web
#   docker-compose logs -f redis
#
# Stop services:
#   docker-compose down
#
# Clean rebuild (remove volumes):
#   docker-compose down -v && docker-compose up --build
#
# Execute commands in running containers:
#   docker-compose exec web npm install
#   docker-compose exec redis redis-cli
#
# Scale services (multiple web instances):
#   docker-compose up --scale web=2
#
# =================================
# Development Notes
# =================================
# 1. Source code is mounted for hot reload
# 2. Redis data persists across restarts
# 3. Node modules are cached in named volume
# 4. Services use health checks for reliability
# 5. .env file is automatically loaded
# 6. Network isolation for service communication
# 7. Resource limits prevent memory issues